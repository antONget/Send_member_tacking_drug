import datetime

from aiogram.types import CallbackQuery, Message
from aiogram import F, Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboards.user import keyboard_main_menu as kb
from utils.error_handling import error_handler
from filter.filter import validate_time
from config_data.config import Config, load_config
from database.models import Drug
from database import requests as rq
import logging

router = Router()
config: Config = load_config()


class StateMainMenu(StatesGroup):
    change_time = State()


@router.message(F.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
@error_handler
async def get_marketplace(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info('get_full_name')
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª',
                         reply_markup=kb.keyboard_start_menu())


@router.callback_query(F.data.startswith('main_menu_'))
@error_handler
async def get_action_main_menu(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
    :param callback: main_menu_balance | main_menu_time
    :param state:
    :param bot:
    :return:
    """
    logging.info('get_action_main_menu')
    action = callback.data.split('_')[-1]
    if action == 'balance':
        info_user = await rq.get_user_by_id(tg_id=callback.from_user.id)
        await callback.message.edit_text(text=f'–í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {info_user.balance_user} –±–∞–ª–ª–æ–≤')
    elif action == 'time':
        drug_active: Drug = await rq.get_drug_active_tg_id(tg_id=callback.from_user.id)
        if drug_active:
            time = drug_active.time_tacking
            taste_drug = drug_active.taste_drug
            volume_drug = drug_active.volume_drug
            taste = '–≥—Ä–µ–π–ø—Ñ—Ä—É—Ç–∞'
            if taste_drug == 'limon':
                taste = '–ª–∏–º–æ–Ω–∞'
            elif taste_drug == 'orange':
                taste = '–∞–ø–µ–ª—å—Å–∏–Ω–∞'
            await state.update_data(drug_id_change=drug_active.id)
            await callback.message.edit_text(text=f'–í–∞—à–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –∫–æ–ª–ª–∞–≥–µ–Ω–∞: Collagen Jelly PP Lab —Å–æ –≤–∫—É—Å–æ–º'
                                                  f' {taste} - {volume_drug} —Å–∞—à–µ <b>{time}</b>',
                                             reply_markup=kb.keyboard_change_time())
        else:
            await callback.message.edit_text(text=f'–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –ø—Ä–∏–µ–º–∞ –∫–æ–ª–ª–∞–≥–µ–Ω–∞')
    await callback.answer()


@router.callback_query(F.data == 'change_time')
@error_handler
async def date_start_taking_drug(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –∫–æ–ª–ª–∞–≥–µ–Ω–∞
    :param callback: date_start_change
    :param state:
    :param bot:
    :return:
    """
    logging.info('date_start_taking_drug')
    await callback.message.edit_text(text="üìÉ–£–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –∫–æ–ª–ª–∞–≥–µ–Ω —Å–ª–µ–¥—É–µ—Ç –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –µ–¥—ã –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å "
                                          "(—É—Ç—Ä–æ–º, –¥–Ω–µ–º –∏–ª–∏ –≤–µ—á–µ—Ä–æ–º). –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å"
                                          " –∫–æ–ª–ª–∞–≥–µ–Ω? –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ‚Äú10:00‚Äù")
    await state.set_state(StateMainMenu.change_time)


@router.message(F.text, StateFilter(StateMainMenu.change_time))
@error_handler
async def get_age(message: Message, state: FSMContext, bot: Bot):
    """
    –ü–æ–ª—É—á–∞–µ–º —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–µ–º–∞ –∫–æ–ª–ª–∞–≥–µ–Ω–∞
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info('get_age')
    time_start_taking_drug = message.text
    if validate_time(time_start_taking_drug):
        await message.answer(text='–í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –∫–æ–ª–ª–∞–≥–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
        data = await state.get_data()
        drug_id_change = data['drug_id_change']
        await rq.set_drug_time_tacking(drug_id=drug_id_change,
                                       time_tacking=time_start_taking_drug)
    else:
        await message.answer(text="""–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ‚Äú10:00‚Äù""")

