import datetime

from aiogram.types import CallbackQuery, Message, InputMediaPhoto
from aiogram import F, Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter

from keyboards.user import keyboard_add_drug as kb
from utils.error_handling import error_handler
from filter.filter import validate_date, validate_time
from config_data.config import Config, load_config
from database import requests as rq
import logging

router = Router()
config: Config = load_config()


class StateDrug(StatesGroup):
    marketplace = State()
    data_start = State()
    time_start = State()


@router.callback_query(F.data.startswith('marketplace_'))
@error_handler
async def process_select_marketplace(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    :param callback:
    :param state:
    :param bot:
    :return:
    """
    logging.info('process_select_marketplace')
    marketplace = callback.data.split('_')[-1]
    await state.update_data(marketplace=marketplace)
    if marketplace == 'other':
        await callback.message.edit_text(text="""–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∏ –∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω–∞, –≥–¥–µ –≤—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –∫–æ–ª–ª–∞–≥–µ–Ω.""")
        await state.set_state(StateDrug.marketplace)
    else:
        await callback.message.edit_text(text="üíñ–í—Å–µ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ. –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –∫–æ–ª–ª–∞–≥–µ–Ω"
                                              " PP Lab –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å.\n\n"
                                              "–í–∞–∂–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞—à–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞ –≤–∞—à–µ–π —É–ø–∞–∫–æ–≤–∫–µ.\n"
                                              "Collagen Jelly PP Lab:",
                                         reply_markup=kb.keyboard_select_drug())
    await callback.answer()


@router.message(F.text, StateFilter(StateDrug.marketplace))
@error_handler
async def get_marketplace(message: Message, state: FSMContext, bot: Bot):
    """
    –ü–æ–ª—É—á–∞–µ–º –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info('get_full_name')
    name_marketplace = message.text
    await state.update_data(marketplace=name_marketplace)
    await message.answer(text="üíñ–í—Å–µ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ. –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –∫–æ–ª–ª–∞–≥–µ–Ω PP Lab –≤—ã"
                              " –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å.\n\n"
                              "–í–∞–∂–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞—à–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞ –≤–∞—à–µ–π —É–ø–∞–∫–æ–≤–∫–µ.\n\n"
                              "Collagen Jelly PP Lab:",
                            reply_markup=kb.keyboard_select_drug())


@router.callback_query(F.data.startswith('type_drug_'))
@error_handler
async def get_type_drug_(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
    :param callback: type_drug_grapefruit_30
    :param state:
    :param bot:
    :return:
    """
    logging.info('get_type_drug_')
    volume = callback.data.split('_')[-1]
    taste = callback.data.split('_')[-2]
    await state.update_data(volume=volume)
    await state.update_data(taste=taste)
    await callback.message.edit_text(text="""–ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01-01-2025.""")
    await state.set_state(StateDrug.data_start)
    await callback.answer()


@router.message(F.text, StateFilter(StateDrug.data_start))
@error_handler
async def get_age(message: Message, state: FSMContext, bot: Bot):
    """
    –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info('get_age')
    data_start_taking_drug = message.text
    if validate_date(data_start_taking_drug):
        year = int(data_start_taking_drug.split('-')[-1])
        month = int(data_start_taking_drug.split('-')[-2])
        day = int(data_start_taking_drug.split('-')[0])
        current_date = datetime.datetime.now()
        input_date = datetime.datetime(year=year, month=month, day=day)
        if current_date < input_date:
            await message.answer(text="–ò—Å—Ö–æ–¥—è –∏–∑ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–µ–≥–æ–¥–Ω—è —É –≤–∞—Å —à–µ—Å—Ç–æ–π –¥–µ–Ω—å –ø—Ä–∏–µ–º–∞ –∫–æ–ª–ª–∞–≥–µ–Ω–∞.\n"
                                      "–≠—Ç–æ –≤–µ—Ä–Ω–æ –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞?",
                                 reply_markup=kb.keyboard_start_registration())
        elif current_date == input_date:
            await message.answer(text="–ò—Å—Ö–æ–¥—è –∏–∑ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–∏–µ–º –∫–æ–ª–ª–∞–≥–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
                                      "–≠—Ç–æ –≤–µ—Ä–Ω–æ –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞?",
                                 reply_markup=kb.keyboard_start_registration())
        else:
            await message.answer(text="–ò—Å—Ö–æ–¥—è –∏–∑ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–∏–µ–º –∫–æ–ª–ª–∞–≥–µ–Ω–∞ –î–ê–¢–ê –≤ –±—É–¥—É—â–µ–º.\n"
                                      "–≠—Ç–æ –≤–µ—Ä–Ω–æ –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞?",
                                 reply_markup=kb.keyboard_start_registration())
        await state.update_data(data_start=data_start_taking_drug)
        start_day = current_date.day - input_date.day
        if start_day < 0:
            start_day = 0
        await state.update_data(start_day=start_day)
        await state.set_state(state=None)
    else:
        await message.answer(text='–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01-01-2025.')


@router.callback_query(F.data.startswith('date_start_'))
@error_handler
async def date_start_taking_drug(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
    :param callback: date_start_change
    :param state:
    :param bot:
    :return:
    """
    logging.info('date_start_taking_drug')
    action = callback.data.split('_')[-1]
    if action == 'change':
        await callback.message.edit_text(text="""–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01-01-2025.""")
        await state.set_state(StateDrug.data_start)
    elif action == 'confirm':
        await callback.message.edit_text(text="üìÉ–£–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –∫–æ–ª–ª–∞–≥–µ–Ω —Å–ª–µ–¥—É–µ—Ç –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –µ–¥—ã –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å"
                                              " (—É—Ç—Ä–æ–º, –¥–Ω–µ–º –∏–ª–∏ –≤–µ—á–µ—Ä–æ–º). –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å"
                                              " –∫–æ–ª–ª–∞–≥–µ–Ω? –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ‚Äú10:00‚Äù")
        await state.set_state(StateDrug.time_start)


@router.message(F.text, StateFilter(StateDrug.time_start))
@error_handler
async def get_age(message: Message, state: FSMContext, bot: Bot):
    """
    –ü–æ–ª—É—á–∞–µ–º —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–µ–º–∞ –∫–æ–ª–ª–∞–≥–µ–Ω–∞
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info('get_age')
    time_start_taking_drug = message.text
    if validate_time(time_start_taking_drug):
        await message.answer(text="–û—Ç–ª–∏—á–Ω–æ! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É–∫–∞–∑–∞–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø—Ä–∏–µ–º–∞ –∫–æ–ª–ª–∞–≥–µ–Ω–∞."
                                  " üòä–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –≤–∞–º –±—ã–ª–æ —É–¥–æ–±–Ω–æ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è"
                                  " –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–µ–º–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞.\n"
                                  "–°–æ–±–ª—é–¥–∞–π—Ç–µ –º–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ –∑–∞ –∫–∞–∂–¥—ã–π —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–∏–µ–º –≤—ã"
                                  " –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã.")
        data = await state.get_data()
        start_day = data['start_day']
        current_hour = datetime.datetime.now().hour
        current_minute = datetime.datetime.now().minute
        current_date = datetime.datetime.now()
        year = int(data['data_start'].split('-')[-1])
        month = int(data['data_start'].split('-')[-2])
        day = int(data['data_start'].split('-')[0])
        drug_data = datetime.datetime(year=year, month=month, day=day)
        if current_date > drug_data and int(time_start_taking_drug.split(':')[0]) <= current_hour and int(time_start_taking_drug.split(':')[1]) < current_minute:
            start_day += 1
            await message.answer(text='–ù–∞—á–Ω–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è,'
                                      ' –Ω–∞–¥–µ—é—Å—å –≤—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–Ω—è–ª–∏ –∫–æ–ª–ª–∞–≥–µ–Ω —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.')
        data_drug = {
            "tg_id": message.from_user.id,
            "marketplace": data['marketplace'],
            "taste_drug": data['taste'],
            "volume_drug": data['volume'],
            "data_start_tacking": data['data_start'],
            "time_tacking": time_start_taking_drug,
            "start_day": data['start_day']
        }
        await rq.add_drug(data=data_drug)
    else:
        await message.answer(text="""–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ‚Äú10:00‚Äù""")
        await state.set_state(StateDrug.time_start)
